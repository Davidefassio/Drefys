#ifndef DREFYS_HPP
#define DREFYS_HPP

#include <iostream>
#include <string>
#include <cstdlib>
#include <cstdint>
#include <queue>
#include <limits>

class Board{
public:
    Board();               // Default constructor
    Board(const Board&);   // Copy constructor

	int8_t  position[120]; // 10x12 board
	bool    white_to_move; // True: white to move, False: black to move
	bool    castling[4];   // W short - W long - B short - B long
	uint8_t enpassant;     // Index of the pawn that can be captured enpassant, 0 otherwise
	int     lastzeroing;   // Number of moves since last reset of 50 move rule
};

class PlutoCE{
public:
    void fillFEN(Board*, std::string);
	void fillStartingPos(Board*);
	void fillEmpty(Board*);

	std::string exportFEN(Board*);

	void displayBoard(Board*);
	void debugBoard(Board*);

	bool isCheck(Board*, bool);

    int makeMove(Board*, std::string);
    std::priority_queue<Board> generateMove(Board*);

	int evaluate(Board*);


private:
    const int ps_pawn[8][8] = {{0,  0,  0,  0,  0,  0,  0,  0}, {50, 50, 50, 50, 50, 50, 50, 50},{10, 10, 20, 30, 30, 20, 10, 10},{ 5,  5, 10, 25, 25, 10,  5,  5},{ 0,  0,  0, 20, 20,  0,  0,  0},{ 5, -5,-10,  0,  0,-10, -5,  5},{ 5, 10, 10,-20,-20, 10, 10,  5},{ 0,  0,  0,  0,  0,  0,  0,  0}};
    const int ps_pawn_pass[8][8] = {{0, 0, 0, 0, 0, 0, 0, 0},{80, 70, 70, 80, 80, 70, 70, 80},{90, 90, 90, 90, 90, 90, 90, 90},{70, 60, 60, 70, 70, 60, 60, 70},{60, 50, 50, 60, 60, 50, 50, 60},{50, 40, 40, 50, 50, 40, 40, 50},{40, 30, 30, 40, 40, 30, 30, 40},{0, 0, 0, 0, 0, 0, 0, 0}};
    const int ps_knight[8][8] = {{-50,-40,-30,-30,-30,-30,-40,-50},{-40,-20,  0,  0,  0,  0,-20,-40},{-30,  0, 10, 15, 15, 10,  0,-30},{-30,  5, 15, 20, 20, 15,  5,-30},{-30,  0, 15, 20, 20, 15,  0,-30},{-30,  5, 10, 15, 15, 10,  5,-30},{-40,-20,  0,  5,  5,  0,-20,-40},{-50,-40,-30,-30,-30,-30,-40,-50}};
    const int ps_bishop[8][8] = {{-20,-10,-10,-10,-10,-10,-10,-20},{-10,  0,  0,  0,  0,  0,  0,-10},{-10,  0,  5, 10, 10,  5,  0,-10},{-10,  5,  5, 10, 10,  5,  5,-10},{-10,  0, 10, 10, 10, 10,  0,-10},{-10, 10, 10, 10, 10, 10, 10,-10},{-10,  5,  0,  0,  0,  0,  5,-10},{-20,-10,-10,-10,-10,-10,-10,-20}};
    const int ps_rook[8][8] = {{0,  0,  0,  0,  0,  0,  0,  0},{5, 10, 10, 10, 10, 10, 10,  5},{-5,  0,  0,  0,  0,  0,  0, -5},{-5,  0,  0,  0,  0,  0,  0, -5},{-5,  0,  0,  0,  0,  0,  0, -5},{-5,  0,  0,  0,  0,  0,  0, -5},{-5,  0,  0,  0,  0,  0,  0, -5},{0,  0,  0,  5,  5,  0,  0,  0}};
    const int ps_queen[8][8] = {{-20,-10,-10, -5, -5,-10,-10,-20},{-10,  0,  0,  0,  0,  0,  0,-10},{-10,  0,  5,  5,  5,  5,  0,-10},{ -5,  0,  5,  5,  5,  5,  0, -5},{  0,  0,  5,  5,  5,  5,  0, -5},{-10,  5,  5,  5,  5,  5,  0,-10},{-10,  0,  5,  0,  0,  0,  0,-10},{-20,-10,-10, -5, -5,-10,-10,-20}};
    const int ps_king[8][8] = {{-30,-40,-40,-50,-50,-40,-40,-30},{-30,-40,-40,-50,-50,-40,-40,-30},{-30,-40,-40,-50,-50,-40,-40,-30},{-30,-40,-40,-50,-50,-40,-40,-30},{-20,-30,-30,-40,-40,-30,-30,-20},{-10,-2-20,-20,-20,-20,-20,-10},{ 20, 20,  0,  0,  0,  0, 20, 20},{ 20, 30, 10,  0,  0, 10, 30, 20}};
    const int ps_king_late[8][8] = {{-50,-40,-30,-20,-20,-30,-40,-50},{-30,-20,-10,  0,  0,-10,-20,-30},{-30,-10, 20, 30, 30, 20,-10,-30},{-30,-10, 30, 40, 40, 30,-10,-30},{-30,-10, 30, 40, 40, 30,-10,-30},{-30,-10, 20, 30, 30, 20,-10,-30},{-30,-30,  0,  0,  0,  0,-30,-30},{-50,-30,-30,-30,-30,-30,-30,-50}};

    //constexpr int pst[720] = {};
    static constexpr int pst_pass_pawn[120] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,70,70,80,80,70,70,80,0,0,90,90,90,90,90,90,90,90,0,0,70,60,60,70,70,60,60,70,0,0,60,50,50,60,60,50,50,60,0,0,50,40,40,50,50,40,40,50,0,0,40,30,30,40,40,30,30,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    static constexpr int pst_king_late[120] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-50,-40,-30,-20,-20,-30,-40,-50,0,0,-30,-20,-10,0,0,-10,-20,-30,0,0,-30,-10,20,30,30,20,-10,-30,0,0,-30,-10,30,40,40,30,-10,-30,0,0,-30,-10,30,40,40,30,-10,-30,0,0,-30,-10,20,30,30,20,-10,-30,0,0,-30,-30,0,0,0,0,-30,-30,0,0,-50,-30,-30,-30,-30,-30,-30,-50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
};

#endif /* DREFYS_HPP */
