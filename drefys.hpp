#ifndef DREFYS_HPP
#define DREFYS_HPP

#include <iostream>
#include <string>
#include <cstdlib>
#include <cstdint>
#include <queue>
#include <limits>

class Move{
public:
    // Constructors
    Move();
    Move(uint8_t, uint8_t, int8_t);
    Move(uint8_t, uint8_t, int8_t, int8_t);

    uint8_t startPos; // Index of the starting cell
    uint8_t endPos;   // Index of the landing cell
    int8_t  captured; // Piece captured or -1
    int8_t  promoted; // Piece promoted to or -1
};

class Board{
public:
    Board();               // Default constructor
    Board(const Board&);   // Copy constructor

	int8_t  position[120]; // 10x12 board
	bool    white_to_move; // True: white to move, False: black to move
	bool    castling[4];   // W short - W long - B short - B long
	uint8_t enpassant;     // Index of the cell behind the pawn that can be captured enpassant, 0 otherwise
	int32_t lastzeroing;   // Number of moves since last reset of 50 move rule
	int32_t evaluation;    // Running evaluation of the position
};

class Drefys{
public:
    static void fillFEN(Board&, std::string);
	static void fillStartingPos(Board&);
	static void fillEmpty(Board&);

	static std::string exportFEN(const Board&);

	static void displayBoard(const Board&);
	static void debugBoard(const Board&);

	static void doMoveUser(Board&, std::string);
	static void doMove(Board&, Move);
	static void undoMove(Board&, Move);

    /*
	bool isCheck(const Board&, bool);
    std::priority_queue<Move> generateMove(const Board&);
    */

    // Utility
    static char fileIntToChar(int32_t);
    static int32_t fileCharToInt(char);

    // Tables
    static inline constexpr int32_t pieceValue[13] = {
        100, -100,         // Pawns
        300, -300,         // Knights
        300, -300,         // Bishops
        500, -500,         // Rooks
        900, -900,         // Queens
        1000000, -1000000  // Kings
    };
    static inline constexpr int32_t pieceSquareTable[1560] = {
        // White pawn
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0, 50, 50, 50, 50, 50, 50, 50, 50,  0,
        0, 10, 10, 20, 30, 30, 20, 10, 10,  0,
        0,  5,  5, 10, 25, 25, 10,  5,  5,  0,
        0,  0,  0,  0, 20, 20,  0,  0,  0,  0,
        0,  5, -5,-10,  0,  0,-10, -5,  5,  0,
        0,  5, 10, 10,-20,-20, 10, 10,  5,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // Black pawn
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0, -5,-10,-10, 20, 20,-10,-10, -5,  0,
        0, -5,  5, 10,  0,  0, 10,  5, -5,  0,
        0,  0,  0,  0,-20,-20,  0,  0,  0,  0,
        0, -5, -5,-10,-25,-25,-10, -5, -5,  0,
        0,-10,-10,-20,-30,-30,-20,-10,-10,  0,
        0,-50,-50,-50,-50,-50,-50,-50,-50,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // White knight
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,-50,-40,-30,-30,-30,-30,-40,-50,  0,
        0,-40,-20,  0,  0,  0,  0,-20,-40,  0,
        0,-30,  0, 10, 15, 15, 10,  0,-30,  0,
        0,-30,  5, 15, 20, 20, 15,  5,-30,  0,
        0,-30,  0, 15, 20, 20, 15,  0,-30,  0,
        0,-30,  5, 10, 15, 15, 10,  5,-30,  0,
        0,-40,-20,  0,  5,  5,  0,-20,-40,  0,
        0,-50,-40,-30,-30,-30,-30,-40,-50,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // Black knight
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0, 50, 40, 30, 30, 30, 30, 40, 50,  0,
        0, 40, 20,  0, -5, -5,  0, 20, 40,  0,
        0, 30, -5,-10,-15,-15,-10, -5, 30,  0,
        0, 30,  0,-15,-20,-20,-15,  0, 30,  0,
        0, 30, -5,-15,-20,-20,-15, -5, 30,  0,
        0, 30,  0,-10,-15,-15,-10,  0, 30,  0,
        0, 40, 20,  0,  0,  0,  0, 20, 40,  0,
        0, 50, 40, 30, 30, 30, 30, 40, 50,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // White bishop
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,-20,-10,-10,-10,-10,-10,-10,-20,  0,
        0,-10,  0,  0,  0,  0,  0,  0,-10,  0,
        0,-10,  0,  5, 10, 10,  5,  0,-10,  0,
        0,-10,  5,  5, 10, 10,  5,  5,-10,  0,
        0,-10,  0, 10, 10, 10, 10,  0,-10,  0,
        0,-10, 10, 10, 10, 10, 10, 10,-10,  0,
        0,-10,  5,  0,  0,  0,  0,  5,-10,  0,
        0,-20,-10,-10,-10,-10,-10,-10,-20,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // Black bishop
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0, 20, 10, 10, 10, 10, 10, 10, 20,  0,
        0, 10, -5,  0,  0,  0,  0, -5, 10,  0,
        0, 10,-10,-10,-10,-10,-10,-10, 10,  0,
        0, 10,  0,-10,-10,-10,-10,  0, 10,  0,
        0, 10, -5, -5,-10,-10, -5, -5, 10,  0,
        0, 10,  0, -5,-10,-10, -5,  0, 10,  0,
        0, 10,  0,  0,  0,  0,  0,  0, 10,  0,
        0, 20, 10, 10, 10, 10, 10, 10, 20,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // White rook
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  5, 10, 10, 10, 10, 10, 10,  5,  0,
        0, -5,  0,  0,  0,  0,  0,  0, -5,  0,
        0, -5,  0,  0,  0,  0,  0,  0, -5,  0,
        0, -5,  0,  0,  0,  0,  0,  0, -5,  0,
        0, -5,  0,  0,  0,  0,  0,  0, -5,  0,
        0, -5,  0,  0,  0,  0,  0,  0, -5,  0,
        0,  0,  0,  0,  5,  5,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // Black rook
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0, -5, -5,  0,  0,  0,  0,
        0,  5,  0,  0,  0,  0,  0,  0,  5,  0,
        0,  5,  0,  0,  0,  0,  0,  0,  5,  0,
        0,  5,  0,  0,  0,  0,  0,  0,  5,  0,
        0,  5,  0,  0,  0,  0,  0,  0,  5,  0,
        0,  5,  0,  0,  0,  0,  0,  0,  5,  0,
        0, -5,-10,-10,-10,-10,-10,-10, -5,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // White queen
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,-20,-10,-10, -5, -5,-10,-10,-20,  0,
        0,-10,  0,  0,  0,  0,  0,  0,-10,  0,
        0,-10,  0,  5,  5,  5,  5,  0,-10,  0,
        0, -5,  0,  5,  5,  5,  5,  0, -5,  0,
        0,  0,  0,  5,  5,  5,  5,  0, -5,  0,
        0,-10,  5,  5,  5,  5,  5,  0,-10,  0,
        0,-10,  0,  5,  0,  0,  0,  0,-10,  0,
        0,-20,-10,-10, -5, -5,-10,-10,-20,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // Black queen
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0, 20, 10, 10,  5,  5, 10, 10, 20,  0,
        0, 10,  0, -5,  0,  0,  0,  0, 10,  0,
        0, 10, -5, -5, -5, -5, -5,  0, 10,  0,
        0,  0,  0, -5, -5, -5, -5,  0,  5,  0,
        0,  5,  0, -5, -5, -5, -5,  0,  5,  0,
        0, 10,  0, -5, -5, -5, -5,  0, 10,  0,
        0, 10,  0,  0,  0,  0,  0,  0, 10,  0,
        0, 20, 10, 10,  5,  5, 10, 10, 20,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // White king
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,-30,-40,-40,-50,-50,-40,-40,-30,  0,
        0,-30,-40,-40,-50,-50,-40,-40,-30,  0,
        0,-30,-40,-40,-50,-50,-40,-40,-30,  0,
        0,-30,-40,-40,-50,-50,-40,-40,-30,  0,
        0,-20,-30,-30,-40,-40,-30,-30,-20,  0,
        0,-10,-20,-20,-20,-20,-20,-20,-10,  0,
        0, 20, 20,  0,  0,  0,  0, 20, 20,  0,
        0, 20, 30, 10,  0,  0, 10, 30, 20,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // Black king
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,-20,-30,-10,  0,  0,-10,-30,-20,  0,
        0,-20,-20,  0,  0,  0,  0,-20,-20,  0,
        0, 10, 20, 20, 20, 20, 20, 20, 10,  0,
        0, 20, 30, 30, 40, 40, 30, 30, 20,  0,
        0, 30, 40, 40, 50, 50, 40, 40, 30,  0,
        0, 30, 40, 40, 50, 50, 40, 40, 30,  0,
        0, 30, 40, 40, 50, 50, 40, 40, 30,  0,
        0, 30, 40, 40, 50, 50, 40, 40, 30,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        // Empty
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0,  0
    };

    // Mailboxes
    static inline constexpr int32_t index120To64[120] = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1,  0,  1,  2,  3,  4,  5,  6,  7, -1,
        -1,  8,  9, 10, 11, 12, 13, 14, 15, -1,
        -1, 16, 17, 18, 19, 20, 21, 22, 23, -1,
        -1, 24, 25, 26, 27, 28, 29, 30, 31, -1,
        -1, 32, 33, 34, 35, 36, 37, 38, 39, -1,
        -1, 40, 41, 42, 43, 44, 45, 46, 47, -1,
        -1, 48, 49, 50, 51, 52, 53, 54, 55, -1,
        -1, 56, 57, 58, 59, 60, 61, 62, 63, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
    static inline constexpr int32_t index64To120[64] = {
        21, 22, 23, 24, 25, 26, 27, 28,
        31, 32, 33, 34, 35, 36, 37, 38,
        41, 42, 43, 44, 45, 46, 47, 48,
        51, 52, 53, 54, 55, 56, 57, 58,
        61, 62, 63, 64, 65, 66, 67, 68,
        71, 72, 73, 74, 75, 76, 77, 78,
        81, 82, 83, 84, 85, 86, 87, 88,
        91, 92, 93, 94, 95, 96, 97, 98
    };
    static inline constexpr int32_t coordFrom64[64][2] = {
        {0, 7}, {1, 7}, {2, 7}, {3, 7}, {4, 7}, {5, 7}, {6, 7}, {7, 7},
        {0, 6}, {1, 6}, {2, 6}, {3, 6}, {4, 6}, {5, 6}, {6, 6}, {7, 6},
        {0, 5}, {1, 5}, {2, 5}, {3, 5}, {4, 5}, {5, 5}, {6, 5}, {7, 5},
        {0, 4}, {1, 4}, {2, 4}, {3, 4}, {4, 4}, {5, 4}, {6, 4}, {7, 4},
        {0, 3}, {1, 3}, {2, 3}, {3, 3}, {4, 3}, {5, 3}, {6, 3}, {7, 3},
        {0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 2},
        {0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1},
        {0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 0}, {7, 0},
    };
    static inline constexpr int32_t coordTo64[8][8] = {
        {56, 48, 40, 32, 24, 16,  8,  0},
        {57, 49, 41, 33, 25, 17,  9,  1},
        {58, 50, 42, 34, 26, 18, 10,  2},
        {59, 51, 43, 35, 27, 19, 11,  3},
        {60, 52, 44, 36, 28, 20, 12,  4},
        {61, 53, 45, 37, 29, 21, 13,  5},
        {62, 54, 46, 38, 30, 22, 14,  6},
        {63, 55, 47, 39, 31, 23, 15,  7}
    };

};

#endif /* DREFYS_HPP */
